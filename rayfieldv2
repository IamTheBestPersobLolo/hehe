local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "BLR V.3 script",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "BLR Script",
    LoadingSubtitle = "by ani, nex and zejin",
    Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("GK", 4483362458) -- Title, Image

 local Toggle = Tab:CreateToggle({
    Name = "Toggle Example",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        
        local autoGKEnabled = true
        local gkSphere = Instance.new("Part")
        gkSphere.Name = "AutoGKZone"
        gkSphere.Shape = Enum.PartType.Ball
        gkSphere.Anchored = true
        gkSphere.CanCollide = false
        gkSphere.Transparency = 0.5
        gkSphere.Size = Vector3.new(28, 28, 28)
        gkSphere.Color = Color3.fromRGB(255, 255, 255)
        gkSphere.Material = Enum.Material.ForceField
        gkSphere.Parent = workspace
        
        local trackedBall = nil
        local function findBall()
            for _, obj in pairs(workspace:GetChildren()) do
                if obj:IsA("Model") and obj:FindFirstChild("Handle") and obj.Name:lower():find("ball") then
                    return obj.Handle
                elseif obj:IsA("BasePart") and obj.Name:lower():find("ball") then
                    return obj
                end
            end
        end
        
        RunService.RenderStepped:Connect(function()
            if not autoGKEnabled then return end
            if character and hrp and gkSphere then
                gkSphere.Position = hrp.Position
            end
        
            local ball = findBall()
            if ball then
                ball.Size = Vector3.new(10, 10, 10)
                trackedBall = ball
            end
        end)
        
        RunService.RenderStepped:Connect(function()
            if not autoGKEnabled or not trackedBall then return end
        
            if (trackedBall.Position - gkSphere.Position).Magnitude <= (gkSphere.Size.X / 2) then
                trackedBall.Anchored = true
                trackedBall.CFrame = hrp.CFrame + Vector3.new(0, 2, 0)
        
                firetouchinterest(hrp, trackedBall, 0)
                firetouchinterest(hrp, trackedBall, 1)
        
                task.delay(0.15, function()
                    trackedBall.Anchored = false
                end)
            end
        end)
    end,
 })

 local Tab = Window:CreateTab("HitBox Visualiser", 4483362458) -- Title, Image

 local Players = game:GetService("Players")
 local RunService = game:GetService("RunService")
 
 local function createBox(part)
     local box = Instance.new("BoxHandleAdornment")
     box.Size = part.Size * 2
     box.Adornee = part
     box.AlwaysOnTop = true
     box.ZIndex = 10
     box.Color3 = Color3.fromRGB(255, 0, 0)
     box.Transparency = 0.3
     box.Name = "HitboxVisualizer"
     box.Parent = part
     return box
 end
 
 local function visualizeHitboxes()
     for _, plr in pairs(Players:GetPlayers()) do
         if plr.Character then
             local hrp = plr.Character:FindFirstChild("HumanoidRootPart") or plr.Character:FindFirstChild("Torso")
             if hrp and not hrp:FindFirstChild("HitboxVisualizer") then
                 createBox(hrp)
             end
         end
     end
 end
 
 RunService.RenderStepped:Connect(visualizeHitboxes)

 local Tab = Window:CreateTab("Tp to ball", 4483362458) -- Title, Image

 local Button = Tab:CreateButton({
    Name = "Button Example",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        
        local function teleportToBall()
            local ball = workspace:FindFirstChild("Football") or workspace:FindFirstChildWhichIsA("Part", true)
            if ball then
                player.Character:MoveTo(ball.Position)
            end
        end
        
        teleportToBall()
    end,
 })
